#line 2 "src/lexer.cpp"

#line 4 "src/lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yynoreturn yy_fatal_error (yyconst char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 170
#define YY_END_OF_BUFFER 171
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[659] =
    {   0,
        0,    0,  171,  169,  168,    1,  156,  169,    4,  162,
      155,  169,  150,  151,  160,  159,  147,  158,  154,  161,
      113,  112,  148,  144,  163,  149,  164,  167,  110,  110,
      152,  153,  165,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  145,  166,  146,  157,  168,  143,    0,  121,
        0,    4,  129,  146,  138,  130,    0,    0,  127,  135,
      125,  136,  126,  137,    0,  116,    2,    3,  128,  117,
      113,    0,    0,  113,  113,    0,  113,  112,  112,  112,
      112,  153,  145,  152,  134,  140,  142,  141,  133,  110,

        0,    0,  131,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,    6,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,   50,  110,  110,  110,  110,  110,
      110,  110,  110,  110,   80,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  132,  139,  121,
        0,    0,    0,    0,  114,    0,    0,  122,    0,  116,
        3,    0,  117,    0,  115,  113,  113,  113,  113,    0,
      111,  112,  112,  112,  112,  124,  123,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   76,  110,  110,  110,  110,   82,  110,
      110,  110,  110,   46,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   26,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,   59,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,    0,    0,    0,    0,    0,  116,
        0,  117,  115,  113,    0,    0,  111,    0,  111,  111,

      112,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   40,    7,  110,  110,   52,   43,  110,
       44,  110,  110,  110,  110,  110,  110,  110,  110,   70,
       71,  110,  110,  110,  110,  110,  110,  110,  110,   77,
      110,  110,  110,  110,  110,   18,   83,  110,  110,   20,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   79,  110,  110,   31,  110,   33,  110,
      110,  110,  110,  110,  110,  110,  110,   96,  110,  110,
        0,    0,    0,    0,    0,    0,  111,  111,    0,  118,

      111,  111,  110,  110,  102,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,   42,   57,  110,   62,   45,
      110,  110,  110,  110,  110,   11,  110,  110,  110,   13,
       60,   14,   73,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   27,  110,   87,  110,  110,  110,  110,
      110,  110,  110,   66,  110,  110,   69,  110,  110,  110,
       34,  110,   94,  110,  110,  110,   38,  110,  110,   98,
        0,  119,    0,  120,  118,  111,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,   47,  110,  110,  110,

      110,  110,  110,   51,  110,  110,   72,  110,  110,  110,
      110,    5,   81,  110,  110,  110,  110,   65,   21,  110,
      110,   24,  110,  110,   53,  110,  110,  110,   86,   28,
       88,   89,  110,   90,  110,   30,   91,   92,  110,   54,
      110,  110,   32,  110,   36,  110,   37,  110,  110,  119,
      120,  110,  110,  101,  110,  110,  110,  110,  110,  110,
      110,  110,   75,    8,  110,    9,   49,  110,  110,   58,
       63,   15,  110,  110,    5,    5,  110,  110,  110,  110,
      110,  110,   78,  110,  110,  110,  110,  110,  110,  110,
      110,   93,  110,  110,   39,  110,   99,  100,  103,  104,

      110,  110,  110,  110,  109,   41,   48,   10,   12,  110,
       16,  110,  110,   17,  110,   22,   23,  110,   25,   84,
       85,  110,   64,  110,  110,  110,   95,   97,  110,  106,
      110,  110,  110,  110,   61,   19,   68,  110,  110,   56,
       35,  105,  110,  110,   67,   55,   29,  110,  110,  110,
      110,  110,  110,   74,  110,  108,  107,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   20,   21,   22,   23,   24,
       25,   26,   27,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   35,   35,   37,   35,   38,   35,   39,
       35,   35,   40,   41,   42,   35,   35,   43,   35,   35,
       44,   45,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   35,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[78] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    4,    1,
        1,    1,    1,    1,    1,    5,    1,    6,    6,    7,
        7,    1,    1,    1,    1,    1,    3,    7,    7,    7,
        7,    7,    7,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    1,    3,    1,    1,    8,    6,    6,
        7,    7,    7,    6,    8,    8,    8,    8,    8,    8,
        8,    9,    8,    8,    9,    8,    9,    8,    9,    8,
        9,    8,    8,    1,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[672] =
    {   0,
        0,    0, 1045, 1046, 1042, 1046, 1018,   73,    0,   54,
       73,  997, 1046, 1046, 1016,   69, 1046,   70,   68,   80,
      103,   83, 1014, 1046,   84, 1014,   85, 1046,    0,  107,
     1046, 1046, 1013,  119,   63,   65,   78,   30,  104,  105,
      974,  115,  973,  129,  120,   93,  982,  135,   61,  174,
       87,  978, 1046,  147, 1046, 1046, 1031, 1046,  175,  188,
      168,    0, 1046, 1046, 1046, 1046,  172,  177, 1046, 1046,
     1046, 1046, 1046, 1046, 1016,  191, 1046,    0, 1046,  234,
      242,  280,  257,  164,  161, 1015,  158,  287,  196,  167,
      205, 1046, 1046, 1046, 1005, 1046, 1046, 1046, 1004,    0,

      214,  983, 1046,   40,  964,  963,  972,  963,  960,  955,
      965,  966,  953,  952,  950,  950,  952,  961,  946,  147,
      188,  963,  949,  229,  942,  943,  940,  954,  179,  946,
      137,  942,  939,  936,    0,  938,  225,  206,  168,  931,
      940,  941,  945,  944,  931,  252,  945,  268,  922,  944,
      929,  231,  232,  927,  933,  927,  185,  264,  924,  982,
      924,  922,  280,  159,  919,  233,  926, 1046, 1046,  316,
      977,  306,  309,    0, 1046,  330,    0, 1046,  344, 1046,
        0,  353, 1046,  323,  358,  283, 1046,  944,  920,    0,
      351,  288, 1046,  942,  918, 1046, 1046,  920,  913,  912,

      913,  911,  923,  906,  921,  904,  900,  900,  913,  902,
      911,  903,  913,  908,  907,  908,  893,  906,  890,  294,
      898,  905,  900,  902,  898,  889,  887,  888,  894,  880,
      896,  891,  894,  889,  878,  320,  883,  872,  885,  878,
      881,  882,  877,    0,  873,  879,  866,  865,  880,  859,
      860,  866,  873,    0,  867,  856,  854,  854,  860,  854,
      856,  864,  318,  313,  863,  848,  863,  847,  849,  849,
      857,    0,  856,  841,  845,  850,  842,  337,  841,  841,
      835,  849,  851,  839,  382,  423,  380,  469,  384,  403,
      388,  473, 1046, 1046,  281,  353,  392,  446,  360,  371,

     1046,  843,  836,  836,  831,  841,  838,  839,  824,  837,
      827,  823,  822,    0,    0,  833,  826,    0,    0,  828,
        0,  824,  816,  814,  823,  818,  810,  822,  816,    0,
        0,  808,  817,  368,  820,  812,  819,  803,  820,    0,
      357,  803,  805,  817,  800,    0,    0,  798,  794,    0,
      811,  812,  795,  798,  809,  804,  799,  792,  788,  788,
      787,  798,  797,  782,  795,  784,  787,  781,  375,  778,
      746,  757,  751,    0,  735,  735,    0,  383,    0,  745,
      745,  724,  730,  720,  701,  705,  691,    0,  691,  704,
      440,    0,  307,    0,  511,  521,  390, 1046,  429,  525,

      719,  695,  692,  696,    0,  692,  686,  693,  682,  691,
      698,  695,  696,  677,  694,    0,    0,  689,    0,    0,
      679,  691,  679,  689,  684,    0,  685,  683,  668,    0,
      669,    0,    0,  677,  666,  675,  658,  671,  661,  408,
      658,  668,  653,  652,  661,  651,  649,  664,  657,  645,
      639,  648,  628,    0,  631,    0,  630,  627,  631,  628,
      611,  622,  609,    0,  619,  609,  607,  615,  618,  616,
        0,  618,    0,  615,  605,  599,    0,  616,  607,    0,
      461,  530,  534,  550, 1046, 1046,  333,  612,  609,  604,
      598,  591,  607,  601,  604,  600,    0,  588,  597,  580,

      587,  579,  578,    0,  587,  577,    0,  570,  585,  587,
      582,  610,    0,  587,  582,  581,  580,    0,    0,  565,
      561,    0,  556,  541,    0,  547,  553,  554,    0,    0,
        0,    0,  543,    0,  548,    0,    0,    0,  538,    0,
      547,  545,    0,  539,    0,  544,    0,  536,  535, 1046,
     1046,  528,  539,    0,  521,  540,  540,  523,  538,  534,
      533,  513,    0,    0,  525,    0,    0,  524,  509,    0,
        0,    0,  513,  507,    0,  687,  520,  521,  506,  514,
      499,  508,    0,  507,  487,  492,  489,  487,  474,  475,
      473,    0,  475,  473,    0,  464,    0,    0,    0,    0,

      451,  453,  464,  452,    0,    0,    0,    0,    0,  444,
        0,  446,  455,    0,  454,    0,    0,  453,    0,    0,
        0,  441,    0,  446,  429,  443,    0,    0,  414,    0,
      418,  420,  405,  415,    0,    0,    0,  387,  343,    0,
        0,    0,  284,  287,    0,    0,    0,  229,  216,  200,
      100,   74,   72,    0,   23,    0,    0, 1046,  764,  773,
      782,  786,  793,  800,  809,  814,  816,  818,  820,  827,
      836
    } ;

static yyconst flex_int16_t yy_def[672] =
    {   0,
      658,    1,  658,  658,  658,  658,  658,  659,  660,  658,
      658,  661,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  662,  662,
      658,  658,  658,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  658,  658,  658,  658,  658,  658,  659,  658,
      663,  660,  658,  658,  658,  658,  661,  664,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  665,  658,  658,
      658,  658,  658,  658,  658,  666,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  662,

      659,  661,  658,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  658,  658,  658,
      658,  658,  659,  667,  658,  661,  668,  658,  658,  658,
      665,  658,  658,  658,  658,  658,  658,  658,  658,  669,
      666,  658,  658,  658,  658,  658,  658,  662,  662,  662,

      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  659,  659,  661,  661,  658,  658,
      658,  658,  658,  658,  669,  669,  658,  658,  658,  658,

      658,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      659,  286,  661,  288,  658,  658,  658,  658,  658,  658,

      658,  658,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      658,  658,  658,  658,  658,  658,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,

      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  670,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  658,
      658,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  671,  670,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,

      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,    0,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658
    } ;

static yyconst flex_uint16_t yy_nxt[1124] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   23,   24,   25,   26,   27,   28,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   30,   29,   29,   29,
       29,   30,   29,   31,    4,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   29,   42,   29,   29,   43,
       29,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       29,   29,   29,   53,   54,   55,   56,   60,   63,   64,
       65,   70,  124,   75,   72,   76,   76,   76,   76,  657,
       93,   77,  125,   71,   73,   74,   78,   66,   80,  198,

       88,   88,   88,   88,   79,   94,  199,   95,   96,   98,
       99,  101,  113,  116,   83,  102,  157,   61,   80,   89,
       81,   81,   82,   82,   90,  158,  120,  117,  114,  118,
      115,  656,  159,  121,   83,   83,  119,  122,  655,   84,
      123,  145,   91,  165,   85,   86,  104,  105,  106,  166,
       90,  654,  107,  130,  108,   83,  109,  146,  110,  111,
      147,  131,   87,  126,  132,  127,  112,  133,  135,  142,
       85,  168,  128,   86,  129,  136,  137,  139,  101,   60,
      175,  140,  102,  143,  149,  173,  173,  150,  144,  170,
      151,  152,  101,  160,  176,  176,  141,  188,  231,  187,

      186,  153,  154,  194,  155,  187,  156,  232,   76,   76,
       76,   76,  215,  216,  279,  280,   68,  186,   60,   61,
      189,  169,  179,  180,  171,  187,  195,  180,  242,  171,
      161,  187,  192,  162,  243,  163,  217,  193,  174,  164,
      218,  268,  228,  179,  180,  229,  193,  177,  653,  269,
      180,   76,   76,   76,   76,  172,  240,   80,   61,   81,
       81,   82,   82,  193,  192,  182,  183,  241,  652,  184,
      183,  184,  193,   83,  185,  185,  185,  185,   84,  221,
      263,  651,  222,   85,  237,  261,  182,  183,  223,  282,
      238,  239,  283,  183,   83,   80,  264,   82,   82,   82,

       82,   87,   80,  262,   88,   88,   88,   88,  250,   85,
      101,   83,  270,   60,  251,  175,  253,  170,   83,  395,
      101,  254,  255,   89,  187,  171,  285,  285,   90,  193,
      276,  271,   83,  256,  257,  272,  277,  650,  175,   83,
      185,  185,  185,  185,  395,  278,   91,  287,  287,  649,
      187,   68,  171,   61,   90,  193,  289,  171,  289,  324,
      325,  290,  290,  290,  290,  291,  296,  291,  367,  369,
      292,  292,  292,  292,   68,  185,  185,  185,  185,  341,
      370,  552,  342,  172,  368,  383,   60,  297,  175,  298,
      293,  396,  299,  384,  293,  553,  401,  393,  393,  391,

      391,  290,  290,  290,  290,  292,  292,  292,  292,  435,
      300,  293,  398,  436,  298,  648,  396,  293,  299,  402,
      290,  290,  290,  290,   68,  461,   61,   60,  397,  428,
      397,  398,  429,  398,  469,  180,  462,  647,  398,  180,
      392,  392,  392,  392,   60,  470,  400,  400,  400,  400,
      392,  392,  392,  392,  392,  392,  180,  398,  399,  398,
      399,  515,  180,  400,  400,  400,  400,   61,  646,  516,
      645,  392,  392,  392,  392,  392,  392,  175,  482,  482,
      482,  482,  644,  643,   61,  642,  394,  394,  394,  394,
      292,  292,  292,  292,  641,  640,  394,  394,  394,  394,

      394,  394,  639,  638,  637,  183,  636,  635,  634,  183,
      633,  632,  631,   68,  630,  629,  628,  394,  394,  394,
      394,  394,  394,  481,  627,  481,  183,  626,  482,  482,
      482,  482,  183,  483,  625,  483,  624,  623,  484,  484,
      484,  484,  400,  400,  400,  400,  622,  482,  482,  482,
      482,  484,  484,  484,  484,  621,  620,  485,  619,  618,
      617,  485,  550,  616,  615,  614,  550,  484,  484,  484,
      484,  613,  612,  611,  610,  609,  608,  607,  485,  606,
      605,  604,  551,  550,  485,  603,  551,  602,  601,  550,
      600,  599,  598,  597,  596,  595,  594,  593,  592,  591,

      590,  589,  588,  551,  587,  586,  585,  584,  583,  551,
      575,  575,  582,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  581,  580,  579,
      578,  575,  575,  575,  575,  575,  575,  577,  574,  573,
      572,  571,  570,  569,  568,  567,  566,  565,  564,  563,
      562,  561,  560,  575,  575,  575,  575,  559,  558,  557,
      556,  555,  554,  549,  548,  547,  546,  545,  544,  543,
      542,  541,  540,  539,  538,  537,  536,  535,  534,  533,
      532,  531,  530,  575,  575,  575,  575,  575,  575,  529,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  528,  527,  526,  525,  575,  575,
      575,  575,  575,  575,  524,  523,  522,  521,  520,  519,
      518,  517,  514,  513,  512,  511,  510,  509,  508,  507,
      575,  575,  575,  575,  506,  505,  504,  503,  502,  501,
      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  486,  480,  479,  478,  477,
      575,  575,  575,  575,   59,  476,   59,   59,   59,   59,
       59,   59,   59,   62,  475,   62,   62,   62,   62,   62,
       62,   62,   67,  474,   67,  473,   67,   67,   67,   67,
       67,  100,  100,  100,  100,   59,   59,  472,   59,  471,

      468,   59,   67,   67,  467,   67,  466,  465,   67,  181,
      464,  181,  181,  181,  181,  181,  181,  181,  191,  191,
      191,  286,  286,  288,  288,  295,  295,  576,  463,  576,
      576,  576,  576,  576,  576,  576,  575,  460,  575,  575,
      575,  575,  575,  575,  575,  459,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  434,  433,
      432,  431,  430,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  390,  389,

      388,  387,  386,  385,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  301,  294,
      294,  101,  284,  281,  275,  274,  101,  273,  267,  266,
      265,  260,  259,  258,  252,  249,  248,  247,  246,  245,

      244,  236,  235,  234,  233,  230,  227,  226,  225,  224,
      220,  219,  214,  213,  212,  211,  210,  209,  208,  207,
      206,  205,  204,  203,  202,  201,  200,   68,  197,  196,
      190,  178,   57,  167,  148,  138,  134,  103,   97,   92,
       69,   68,   58,   57,  658,    3,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658
    } ;

static yyconst flex_int16_t yy_chk[1124] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    8,   10,   10,
       11,   16,   38,   19,   18,   19,   19,   19,   19,  655,
       25,   20,   38,   16,   18,   18,   20,   11,   22,  104,

       22,   22,   22,   22,   20,   25,  104,   25,   25,   27,
       27,   30,   35,   36,   22,   30,   49,    8,   21,   22,
       21,   21,   21,   21,   22,   49,   37,   36,   35,   36,
       35,  653,   49,   37,   21,   22,   36,   37,  652,   21,
       37,   46,   22,   51,   21,   21,   34,   34,   34,   51,
       22,  651,   34,   40,   34,   21,   34,   46,   34,   34,
       46,   40,   21,   39,   40,   39,   34,   40,   42,   45,
       21,   54,   39,   21,   39,   42,   42,   44,   50,   59,
       67,   44,   50,   45,   48,   61,   61,   48,   45,   60,
       48,   48,   60,   50,   68,   68,   44,   85,  131,   87,

       84,   48,   48,   90,   48,   84,   48,  131,   76,   76,
       76,   76,  120,  120,  164,  164,   67,   87,  101,   59,
       85,   54,   76,   76,   60,   87,   90,   76,  139,   60,
       50,   84,   89,   50,  139,   50,  121,   89,   61,   50,
      121,  157,  129,   76,   76,  129,   91,   68,  650,  157,
       76,   80,   80,   80,   80,   60,  138,   81,  101,   81,
       81,   81,   81,   89,   91,   80,   80,  138,  649,   83,
       80,   83,   91,   81,   83,   83,   83,   83,   81,  124,
      153,  648,  124,   81,  137,  152,   80,   80,  124,  166,
      137,  137,  166,   80,   81,   82,  153,   82,   82,   82,

       82,   81,   88,  152,   88,   88,   88,   88,  146,   81,
      172,   82,  158,  173,  146,  393,  148,  170,   88,  295,
      170,  148,  148,   88,  186,  172,  173,  173,   88,  192,
      163,  158,   82,  148,  148,  158,  163,  644,  176,   88,
      184,  184,  184,  184,  295,  163,   88,  176,  176,  643,
      186,  393,  170,  173,   88,  192,  179,  170,  179,  220,
      220,  179,  179,  179,  179,  182,  191,  182,  263,  264,
      182,  182,  182,  182,  176,  185,  185,  185,  185,  236,
      264,  487,  236,  170,  263,  278,  285,  191,  287,  191,
      185,  296,  191,  278,  185,  487,  299,  287,  287,  285,

      285,  289,  289,  289,  289,  291,  291,  291,  291,  341,
      191,  185,  300,  341,  191,  639,  296,  185,  191,  299,
      290,  290,  290,  290,  287,  369,  285,  286,  297,  334,
      300,  397,  334,  297,  378,  290,  369,  638,  300,  290,
      286,  286,  286,  286,  391,  378,  399,  399,  399,  399,
      286,  286,  286,  286,  286,  286,  290,  397,  298,  297,
      298,  440,  290,  298,  298,  298,  298,  286,  634,  440,
      633,  286,  286,  286,  286,  286,  286,  288,  481,  481,
      481,  481,  632,  631,  391,  629,  288,  288,  288,  288,
      292,  292,  292,  292,  626,  625,  288,  288,  288,  288,

      288,  288,  624,  622,  618,  292,  615,  613,  612,  292,
      610,  604,  603,  288,  602,  601,  596,  288,  288,  288,
      288,  288,  288,  395,  594,  395,  292,  593,  395,  395,
      395,  395,  292,  396,  591,  396,  590,  589,  396,  396,
      396,  396,  400,  400,  400,  400,  588,  482,  482,  482,
      482,  483,  483,  483,  483,  587,  586,  400,  585,  584,
      582,  400,  482,  581,  580,  579,  482,  484,  484,  484,
      484,  578,  577,  574,  573,  569,  568,  565,  400,  562,
      561,  560,  484,  482,  400,  559,  484,  558,  557,  482,
      556,  555,  553,  552,  549,  548,  546,  544,  542,  541,

      539,  535,  533,  484,  528,  527,  526,  524,  523,  484,
      512,  512,  521,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  520,  517,  516,
      515,  512,  512,  512,  512,  512,  512,  514,  511,  510,
      509,  508,  506,  505,  503,  502,  501,  500,  499,  498,
      496,  495,  494,  512,  512,  512,  512,  493,  492,  491,
      490,  489,  488,  479,  478,  476,  475,  474,  472,  470,
      469,  468,  467,  466,  465,  463,  462,  461,  460,  459,
      458,  457,  455,  512,  512,  512,  512,  576,  576,  453,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,

      576,  576,  576,  576,  452,  451,  450,  449,  576,  576,
      576,  576,  576,  576,  448,  447,  446,  445,  444,  443,
      442,  441,  439,  438,  437,  436,  435,  434,  431,  429,
      576,  576,  576,  576,  428,  427,  425,  424,  423,  422,
      421,  418,  415,  414,  413,  412,  411,  410,  409,  408,
      407,  406,  404,  403,  402,  401,  390,  389,  387,  386,
      576,  576,  576,  576,  659,  385,  659,  659,  659,  659,
      659,  659,  659,  660,  384,  660,  660,  660,  660,  660,
      660,  660,  661,  383,  661,  382,  661,  661,  661,  661,
      661,  662,  662,  662,  662,  663,  663,  381,  663,  380,

      376,  663,  664,  664,  375,  664,  373,  372,  664,  665,
      371,  665,  665,  665,  665,  665,  665,  665,  666,  666,
      666,  667,  667,  668,  668,  669,  669,  670,  370,  670,
      670,  670,  670,  670,  670,  670,  671,  368,  671,  671,
      671,  671,  671,  671,  671,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  349,  348,  345,  344,  343,  342,  339,  338,
      337,  336,  335,  333,  332,  329,  328,  327,  326,  325,
      324,  323,  322,  320,  317,  316,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  284,  283,

      282,  281,  280,  279,  277,  276,  275,  274,  273,  271,
      270,  269,  268,  267,  266,  265,  262,  261,  260,  259,
      258,  257,  256,  255,  253,  252,  251,  250,  249,  248,
      247,  246,  245,  243,  242,  241,  240,  239,  238,  237,
      235,  234,  233,  232,  231,  230,  229,  228,  227,  226,
      225,  224,  223,  222,  221,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  195,  194,  189,
      188,  171,  167,  165,  162,  161,  160,  159,  156,  155,
      154,  151,  150,  149,  147,  145,  144,  143,  142,  141,

      140,  136,  134,  133,  132,  130,  128,  127,  126,  125,
      123,  122,  119,  118,  117,  116,  115,  114,  113,  112,
      111,  110,  109,  108,  107,  106,  105,  102,   99,   95,
       86,   75,   57,   52,   47,   43,   41,   33,   26,   23,
       15,   12,    7,    5,    3,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/config/lexer.l"
/* config/lexer.l */
#line 3 "src/config/lexer.l"
#include "tok.h"
#include <cstdlib>


//extern void yyerror(const char *);  /* prints grammar violation message */

//extern int sym_type(const char *);  /* returns type from symbol table */

//#define sym_type(identifier) IDENTIFIER /* with no symbol table, fake it */

static void comment(void);
static int check_type(void);


int nline;
int ncolumn = 0;

#line 940 "src/lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

			int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 38 "src/config/lexer.l"


#line 1161 "src/lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 659 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1046 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 40 "src/config/lexer.l"
{ nline++; ncolumn = 0;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 42 "src/config/lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 43 "src/config/lexer.l"
{ /* consume //-comment */}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 44 "src/config/lexer.l"
{}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 45 "src/config/lexer.l"
{}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 48 "src/config/lexer.l"
{ return(AS); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 49 "src/config/lexer.l"
{ return(BASE); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 50 "src/config/lexer.l"
{ return(CHECKED); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 51 "src/config/lexer.l"
{ return(DECIMAL); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 52 "src/config/lexer.l"
{ return(DELEGATE); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 53 "src/config/lexer.l"
{ return(EVENT); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 54 "src/config/lexer.l"
{ return(EXPLICIT); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 55 "src/config/lexer.l"
{ return(FALS); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 56 "src/config/lexer.l"
{ return(FIXED); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 57 "src/config/lexer.l"
{ return(FEACH); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 58 "src/config/lexer.l"
{ return(IMPLICIT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 59 "src/config/lexer.l"
{ return(INTERNAL); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 60 "src/config/lexer.l"
{ return(LOCK); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 61 "src/config/lexer.l"
{ return(NSPA); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 62 "src/config/lexer.l"
{ return(NUL); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 63 "src/config/lexer.l"
{ return(OBJECT); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 64 "src/config/lexer.l"
{ return(OPRT); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 65 "src/config/lexer.l"
{ return(OVRD); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 66 "src/config/lexer.l"
{ return(PARAMS); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 67 "src/config/lexer.l"
{ return(REDY); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 68 "src/config/lexer.l"
{ return(REF); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 69 "src/config/lexer.l"
{ return(SBYTE); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 70 "src/config/lexer.l"
{ return(SEALED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 71 "src/config/lexer.l"
{ return(STALLC); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 72 "src/config/lexer.l"
{ return(STRING); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 73 "src/config/lexer.l"
{ return(TRU); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 74 "src/config/lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 75 "src/config/lexer.l"
{ return(UINT); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 76 "src/config/lexer.l"
{ return(ULONG); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 77 "src/config/lexer.l"
{ return(UCEKD); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 78 "src/config/lexer.l"
{ return(USFE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 79 "src/config/lexer.l"
{ return(USHORT); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 80 "src/config/lexer.l"
{ return(USING); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 81 "src/config/lexer.l"
{ return(VIR); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 82 "src/config/lexer.l"
{ return(AUTO); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 83 "src/config/lexer.l"
{ return(ABS); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 84 "src/config/lexer.l"
{ return(BREAK); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 85 "src/config/lexer.l"
{ return(CASE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 86 "src/config/lexer.l"
{ return(CHAR); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 87 "src/config/lexer.l"
{ return(CONST); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 88 "src/config/lexer.l"
{ return(NEW); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 89 "src/config/lexer.l"
{ return(ASSERT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 90 "src/config/lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 91 "src/config/lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 92 "src/config/lexer.l"
{ return(DO); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 93 "src/config/lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 94 "src/config/lexer.l"
{ return(BYTE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 95 "src/config/lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 96 "src/config/lexer.l"
{ return(THROWS); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 97 "src/config/lexer.l"
{ return(INSOF); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 98 "src/config/lexer.l"
{ return(TRANS); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 99 "src/config/lexer.l"
{ return(CATCH); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 100 "src/config/lexer.l"
{ return(EXTENDS); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 101 "src/config/lexer.l"
{ return(TRY); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 102 "src/config/lexer.l"
{ return(FINAL); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 103 "src/config/lexer.l"
{ return(INTER); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 104 "src/config/lexer.l"
{ return(CLASS); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 105 "src/config/lexer.l"
{ return(FINALLY); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 106 "src/config/lexer.l"
{ return(STRICT); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 107 "src/config/lexer.l"
{ return(NATIVE); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 108 "src/config/lexer.l"
{ return(SUPER); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 109 "src/config/lexer.l"
{ return(IMP); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 110 "src/config/lexer.l"
{ return(PROT); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 111 "src/config/lexer.l"
{ return(THROW); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 112 "src/config/lexer.l"
{ return(ELSE); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 113 "src/config/lexer.l"
{ return(ENUM); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 114 "src/config/lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 115 "src/config/lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 116 "src/config/lexer.l"
{ return(SYN); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 117 "src/config/lexer.l"
{ return(BOOLEAN); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 118 "src/config/lexer.l"
{ return(FOR); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 119 "src/config/lexer.l"
{ return(GOTO); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 120 "src/config/lexer.l"
{ return(PRI); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 121 "src/config/lexer.l"
{ return(THIS); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 122 "src/config/lexer.l"
{ return(IF); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 123 "src/config/lexer.l"
{ return(INLINE); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 124 "src/config/lexer.l"
{ return(INT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 125 "src/config/lexer.l"
{ return(LONG); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 126 "src/config/lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 127 "src/config/lexer.l"
{ return(RESTRICT); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 128 "src/config/lexer.l"
{ return(RETURN); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 129 "src/config/lexer.l"
{ return(SHORT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 130 "src/config/lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 131 "src/config/lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 132 "src/config/lexer.l"
{ return(STATIC); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 133 "src/config/lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 134 "src/config/lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 135 "src/config/lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 136 "src/config/lexer.l"
{ return(UNION); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 137 "src/config/lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 138 "src/config/lexer.l"
{ return(VOID); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 139 "src/config/lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 140 "src/config/lexer.l"
{ return(WHILE); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 141 "src/config/lexer.l"
{ return (ALIGNAS); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 142 "src/config/lexer.l"
{ return (ALIGNOF); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 143 "src/config/lexer.l"
{ return (ATOMIC); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 144 "src/config/lexer.l"
{ return (BOOL); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 145 "src/config/lexer.l"
{ return (COMPLEX); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 146 "src/config/lexer.l"
{ return (GENERIC); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 147 "src/config/lexer.l"
{ return (IMAGINARY); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 148 "src/config/lexer.l"
{ return (NORETURN); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 149 "src/config/lexer.l"
{ return (STATIC_ASSERT); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 150 "src/config/lexer.l"
{ return (THREAD_LOCAL); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 151 "src/config/lexer.l"
{ return (FUNC_NAME); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 153 "src/config/lexer.l"
{ var_val = yytext; return check_type(); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 155 "src/config/lexer.l"
{ return I_CONSTANT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 156 "src/config/lexer.l"
{ return I_CONSTANT; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 157 "src/config/lexer.l"
{ return I_CONSTANT; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 158 "src/config/lexer.l"
{ return I_CONSTANT; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 160 "src/config/lexer.l"
{ return F_CONSTANT; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 161 "src/config/lexer.l"
{ return F_CONSTANT; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 162 "src/config/lexer.l"
{ return F_CONSTANT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 163 "src/config/lexer.l"
{ return F_CONSTANT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 164 "src/config/lexer.l"
{ return F_CONSTANT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 165 "src/config/lexer.l"
{ return F_CONSTANT; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 167 "src/config/lexer.l"
{ return STRING_LITERAL; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 169 "src/config/lexer.l"
{ return ELLIPSIS; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 170 "src/config/lexer.l"
{ return RIGHT_ASSIGN; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 171 "src/config/lexer.l"
{ return LEFT_ASSIGN; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 172 "src/config/lexer.l"
{ return ADD_ASSIGN; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 173 "src/config/lexer.l"
{ return SUB_ASSIGN; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 174 "src/config/lexer.l"
{ return MUL_ASSIGN; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 175 "src/config/lexer.l"
{ return DIV_ASSIGN; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 176 "src/config/lexer.l"
{ return MOD_ASSIGN; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 177 "src/config/lexer.l"
{ return AND_ASSIGN; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 178 "src/config/lexer.l"
{ return XOR_ASSIGN; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 179 "src/config/lexer.l"
{ return OR_ASSIGN; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 180 "src/config/lexer.l"
{ return RIGHT_OP; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 181 "src/config/lexer.l"
{ return LEFT_OP; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 182 "src/config/lexer.l"
{ return INC_OP; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 183 "src/config/lexer.l"
{ return DEC_OP; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 184 "src/config/lexer.l"
{ return PTR_OP; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 185 "src/config/lexer.l"
{ return AND_OP; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 186 "src/config/lexer.l"
{ return OR_OP; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 187 "src/config/lexer.l"
{ return LE_OP; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 188 "src/config/lexer.l"
{ return GE_OP; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 189 "src/config/lexer.l"
{ return EQ_OP; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 190 "src/config/lexer.l"
{ return NE_OP; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 191 "src/config/lexer.l"
{ return ';'; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 192 "src/config/lexer.l"
{ return '{'; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 193 "src/config/lexer.l"
{ return '}'; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 194 "src/config/lexer.l"
{ return ','; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 195 "src/config/lexer.l"
{ return ':'; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 196 "src/config/lexer.l"
{ return '='; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 197 "src/config/lexer.l"
{ return '('; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 198 "src/config/lexer.l"
{ return ')'; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 199 "src/config/lexer.l"
{ return '['; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 200 "src/config/lexer.l"
{ return ']'; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 201 "src/config/lexer.l"
{ return '.'; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 202 "src/config/lexer.l"
{ return '&'; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 203 "src/config/lexer.l"
{ return '!'; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 204 "src/config/lexer.l"
{ return '~'; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 205 "src/config/lexer.l"
{ return '-'; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 206 "src/config/lexer.l"
{ return '+'; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 207 "src/config/lexer.l"
{ return '*'; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 208 "src/config/lexer.l"
{ return '/'; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 209 "src/config/lexer.l"
{ return '%'; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 210 "src/config/lexer.l"
{ return '<'; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 211 "src/config/lexer.l"
{ return '>'; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 212 "src/config/lexer.l"
{ return '^'; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 213 "src/config/lexer.l"
{ return '|'; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 214 "src/config/lexer.l"
{ return '?'; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 216 "src/config/lexer.l"
{ /* whitespace separates tokens */ }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 217 "src/config/lexer.l"
{ /* discard bad characters */ }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 219 "src/config/lexer.l"
ECHO;
	YY_BREAK
#line 2069 "src/lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 659 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 659 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 658);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,(int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 219 "src/config/lexer.l"



int yywrap(void)        /* called at end of input */
{
    return 1;           /* terminate now */
}

static void comment(void)
{
    int c;
	int flag = 0;

    while ((c = yyinput()) != 0)
    { 
		flag = 0;
		if (c == '*')
        {
            while ((c = yyinput()) == '*')
                ;

            if (c == '/')
                return;

            if (c == 0)
                break;
			
			if (c == '\n')
			{
				//printf("cline: %d\n", nline);
				nline++;
				flag = 1;
			}
        }
		if (flag == 0 && c == '\n')
		{
			//printf("cline: %d\n", nline);
			nline ++;
		}
    }    
    //yyerror("unterminated comment");
}

static int check_type(void)
{
    
    //switch (sym_type(yytext))
    //{
    //case TYPEDEF_NAME:                /* previously defined */
    //    return TYPEDEF_NAME;
    //case ENUMERATION_CONSTANT:        /* previously defined */
    //    return ENUMERATION_CONSTANT;
    //default:                          /* includes undefined */
        return IDENTIFIER;
    //}
}

